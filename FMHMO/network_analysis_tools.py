# -*- coding: utf-8 -*-
"""
Created on Fri Jul  1 07:57:23 2022

@author: Administrator
"""
import numpy as np
import igraph as ig
import networkx as nx
import os
import time
import copy
from tqdm import tqdm
import MFHCD_function as func

# 各模块函数
import motif_network_construct as net_stru_func
import algorithm_FCD_function as alg_func
# import MFHCD_function as func
import MFHCD_function_NOMerge as func

# 引入外部函数
import find_motifs as fm
# import xlwt

# C函数
import cython_function as cfunc

# =============================================================================
# 网络信息 
# network
# =============================================================================
## 真实网络
path = r"data/realnetwork"
## 真实网络
karate_network = path + r'/karate.txt'
dolphins_network = path + r'/dolphins.txt'
polbooks_network = path + r'/polbooks.txt'
football_network = path + r'/football.txt'
jazz_network = path + r'/jazz.txt'
metabolic_network = path + r'/metabolic.txt'
netscience_network = path + r'/netscience.txt'
email_network = path + r'/email.txt'
email_Eu_core_network = path + r'/email_Eu_core.txt'
road_minnesota_network = path + r'/road_minnesota.txt'
cornell_network = path + r'/cornell.txt'
cora_network = path + r'/cora.txt'
citeseer_network = path + r'/citeseer.txt'
powergrid_network = path + r'/powergrid.txt'
powergrid_0_network = path + r'/powergrid_0.txt'
pgp_network = path + r'/pgp.txt'
comDBLP_network = path + r'/comDBLP.txt'
polblogs_network = path + r'/polblogs.txt'
PubMed_network = path + r'/PubMed.txt'

benson_network = path + r'/benson.txt'
beican_9_network = path + r'/9_beican.txt'
test_network = path + r'/test.txt'
zhang_network = path + r'/zhang.txt'
lesmis_network = path + r'/lesmis.txt'

## 功能网络
macaque_network = path + r'/macaque.txt'

## 人工合成网络
LFR_path = r"data/LFRnetwork/LFR_1000"
# lfr_no = '50'
# lfr_network = LFR_path + r'/network' + str(lfr_no)+'.txt'

# 选择网络
# real
network_name = 'beican_9'
network = eval(network_name + '_network')
groundtruth_path = path + "/real/" + network_name + '_groundtruth.txt'

# LFR
# network = lfr_network
# network_name = "network" + str(lfr_no)
# groundtruth_path = LFR_path + "/real/" + network_name + '_groundtruth.txt'


# 获取网络数据中的边列表，并根据其使用igraph创建网络
G1 = nx.read_edgelist(network, create_using=nx.Graph())
# G1 = G1.to_undirected()
Gi=ig.Graph.Read_Edgelist(network)
Gi=Gi.subgraph(map(int,G1.nodes()))          
Gi=Gi.as_undirected()

edge_all = Gi.get_edgelist()
node_list = list(G1.nodes)

# 各参数设置
# =============================================================================
n=G1.number_of_nodes()
# NP = 100
# c = 18 #社区的真实划分数
# # 各标记列表
Mlist = {1:"M1",2:"M2",3:"M3",4:"M4",5:"M5",6:"M6",7:"M7",8:"M8"} #模体选择列表
Qlist = {1:"Q",2:"Qg",3:"Qc_FCD",4:"Qc_OCD",5:"Qov",6:"MC"} # 模块度函数列表
nmmlist = {1:"NOMM",2:"NMM",3:"MNMM",4:"NWMM"} # nmm操作列表
# 本次算法使用的标记
M_flag = Mlist[1]
Q_flag = Qlist[1] #模块度函数 Q
 
# =============================================================================
# 构建基于模体M1的加权网络
# =============================================================================
# 获得无权网络邻接矩阵
G2 = nx.Graph() 
G2.add_nodes_from([i for i in range(n)])
G2.add_edges_from(edge_all)
adj= nx.adjacency_matrix(G2)
adj=adj.todense() 
# =============================================================================
# 网络平均度计算
# =============================================================================
degrees = dict(G2.degree())
degrees_sum = sum(degrees.values())
average_degrees = degrees_sum/n
print("average_degrees=",average_degrees)
# ================================================== ===========================
# 构建基于模体M的加权网络
# =============================================================================
# 获得无权网络邻接矩阵
G2 = nx.Graph() 
G2.add_nodes_from([i for i in range(n)])
G2.add_edges_from(edge_all)
adj= nx.adjacency_matrix(G2)
adj=adj.todense() 

G,ij_participate_motif_number_list = net_stru_func.construct_weighted_network(G2,edge_all,n,M_flag) #构建出基于M_flag模体加权的网络
    
# 构建基于模体的加权网络邻接矩阵motif_adj
motif_adj = nx.adjacency_matrix(G)
motif_adj = motif_adj.todense() 
me_adj = motif_adj + adj #总权重矩阵=模体权重+边权重
W = np.sum(motif_adj) # 权值之和
m = np.ravel(np.sum(motif_adj, axis=0)) # adj 各列之和
S = np.sum(adj) # 权值之和
ms = np.sum(adj, axis=0) # adj 各列之和

C_all_dict = nx.clustering(G1) #各节点聚类系数
C_all = sorted([(int(i),C_all_dict[i])for i in C_all_dict.keys()],key=lambda x:x[1],reverse=True)
g = nx.Graph()
edge_dict = {}
# 3阶模体
g.add_nodes_from([1, 2, 3])
g.add_edges_from([(1, 2), (2, 3), (3, 1)])  # 连通

i_Mnumber=[]
for i in node_list:
    i_num = fm.node_in_motif(G1, g,i, directed=False, weighted=False)
    i_Mnumber.append((int(i)+1,i_num + np.sum(me_adj[int(i),:])))
i_Mnumber = sorted(i_Mnumber, key=lambda x:x[1],reverse=True)

reallist = []
# with open(groundtruth_path, mode='r',encoding='UTF-8') as f:
#       reallist = list(map(int,f.read().splitlines()))
      
weights = []
for edge in edge_all:
    weights.append(motif_adj[edge[0],edge[1]])
    
# 获得模体集合：点集和边集
motif_node_set, motif_edge_set = fm.total_motif_list(G, g, directed=False, weighted=False)
r = len(motif_node_set) #网络中的模体数量
motif_dict,mno_dict = dict(),dict() # 初始化模体字典和模体编号字典
for mno, mo in enumerate(motif_node_set):
    motif_dict[tuple(mo)] = mno
    mno_dict[mno] = tuple(mo)
# 获得点模体集合，构建集合字典
node_mdict = dict()
for i in range(n):
    NodeSet,EdgeSet = fm.node_in_motif_list(G, g, i , directed=False, weighted=False)
    node_mdict[i] = [tuple(sorted(im)) for im in NodeSet]
motif_info = (r,motif_dict,mno_dict) # 网络中的模体信息，(模体数目，模体字典，模体编号字典)

Compactness = np.zeros((n,n), dtype = float)
for i in range(n):
    for j in range(n):
        Compactness[i,j] = motif_adj[i,j] - (m[i]*m[j])/W

# =============================================================================
# #计算网络的u值
# =============================================================================
# 计算网络的u值
## 网络真实社区划分
# real_c_n = {}
# for cno in set(reallist):
#     c_ilist = []
#     for index, i_cno in enumerate(reallist):
#         if i_cno == cno:
#             c_ilist.append(index) 
#     real_c_n[cno] = c_ilist
# u = 0.0
# wai_edge_sum = 0
# for cno_ilist in real_c_n.values():
#     for i in cno_ilist:     
#         i_degree = degrees[i]
#         # 计算i节点与社区外的边数值
#         j_nodes = np.ravel(np.nonzero(np.ravel(adj[i,:])))
#         js = [j for j in j_nodes if j in cno_ilist]
#         i_wai_edgenum = i_degree-len(js)
#         wai_edge_sum += i_wai_edgenum
# u = wai_edge_sum / degrees_sum
# print("u=",u)
    
 

# =============================================================================
# 挑选网络的部分节点组成新网络
# =============================================================================
# netdatas = [9,14,17,24,37,44,57,66,74,91,102,105,114,130,168,188,197,209,229,235,246,262,268,278,280,281,282,283,284,287,303,317,328,362,397,410,416,429,439,473,477,483,491,498,502,503,511,527,532,545,552,574,576,589,598,616,619,634,639,649,666,675,678,687,689,763,765,808,815,821,825,832,845,846,854,857,858,876,884,923,950,968,971,975,976,977,987,5,16,18,23,26,32,34,49,56,64,70,108,115,122,137,149,163,167,191,199,213,224,239,244,245,293,295,296,298,301,306,309,315,332,344,345,351,360,365,395,409,452,453,455,463,479,485,507,512,524,533,556,571,591,595,624,632,636,682,691,707,767,778,780,781,792,817,831,882,896,902,912,916,917,940,945,948,972,6,12,20,33,48,71,93,117,140,150,174,196,198,204,206,223,271,289,294,311,322,331,346,352,368,371,385,389,391,437,438,454,468,470,475,486,500,508,517,536,538,553,554,555,562,566,568,581,583,590,596,599,608,653,665,673,677,685,690,693,703,708,713,725,727,728,738,766,782,783,809,840,841,852,864,867,873,890,894,901,951,954,960,967,991,992,995,996]
# netdatas.sort()
# newdatas = [i for i in range(len(set(netdatas)))]
# d_dicts = dict(zip(netdatas,newdatas))
# clist = []
# cnos = []
# for index, d in enumerate(netdatas):
#     clist.append(reallist[d])
# for cno1 in clist:
#     for index,cno in enumerate(set(clist)):
#         if cno == cno1:
#             cnos.append(index)
            
# print("data_len={} set_len={}".format(len(netdatas),len(set(netdatas))))
# data = []
# for edge in edge_all:
#     if netdatas.count(edge[0]) >0 and netdatas.count(edge[1]) >0:
#         line = str(d_dicts[edge[0]]) + ' ' + str(d_dicts[edge[1]]) + ' ' + str(motif_adj[edge[0],edge[1]])
#         data.append(line)


# with open(LFR_path + '/M1_W/' + network_name + '0_M1.txt', mode='w',encoding='UTF-8') as log_f:
#     for line in data:
#         log_f.writelines(line + "\n")


# =============================================================================
# 创建模体加权文件 M=M1
# =============================================================================
# data = []
# for edge in edge_all:
#     line = str(edge[0]) + ' ' + str(edge[1]) + ' ' + str(motif_adj[edge[0],edge[1]])
#     data.append(line)

# with open(LFR_path + '/M1_W/' + network_name + '_M1.txt', mode='w',encoding='UTF-8') as log_f:
#     for line in data:
#         log_f.writelines(line + "\n")

# =============================================================================
# 分析网络社区划分
# =============================================================================
# real_mem = [26, 60, 79, 23, 26, 23, 79, 7, 7, 26, 23, 108, 103, 79, 103, 79, 26, 99, 103, 18, 99, 7, 7, 26, 108, 60, 103, 99, 108, 18, 18, 103, 79, 60, 103, 18, 103, 60, 103, 79, 23, 26, 103, 103, 59, 60, 114, 79, 59, 114, 108, 7, 23, 114, 103, 18, 99, 59, 99, 99, 79, 103, 99, 99, 79, 99, 59, 114, 7, 108, 99, 103, 23, 114, 23, 59, 99, 7, 7, 18, 18, 23, 18, 114, 23, 103, 59, 99, 114, 60, 108, 59, 59, 26, 18, 99, 99, 99, 23, 103, 79, 18, 23, 60, 26, 60, 79, 23, 7, 60, 114, 7, 59, 99, 114]
# real_mem = reallist
membership_karate_4_4838 = [4, 4, 4, 4, 3, 3, 3, 4, 2, 2, 3, 4, 4, 4, 2, 2, 3, 4, 2, 4, 2, 4, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2]
membership_karate_3_4798 = [1, 1, 1, 1, 0, 0, 0, 1, 5, 1, 0, 1, 1, 1, 5, 5, 0, 1, 5, 1, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
membership_football_11_8531_9095 = [10, 3, 1, 11, 10, 11, 1, 6, 6, 10, 11, 14, 2, 1, 2, 1, 10, 7, 2, 9, 7, 6, 6, 10, 14, 3, 2, 7, 14, 9, 9, 2, 1, 3, 2, 9, 2, 3, 2, 1, 11, 10, 2, 2, 8, 3, 4, 1, 8, 4, 14, 6, 11, 4, 2, 9, 7, 8, 7, 7, 1, 2, 7, 7, 1, 7, 8, 4, 6, 14, 7, 2, 11, 4, 11, 8, 7, 6, 6, 9, 9, 11, 9, 4, 11, 2, 8, 7, 4, 3, 14, 8, 8, 10, 9, 7, 7, 7, 11, 2, 1, 9, 11, 3, 10, 3, 1, 11, 6, 3, 4, 6, 8, 7, 4]
membership_macque_3_2645 = [0, 0, 1, 1, 1, 0, 1, 9, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 9, 9, 9, 1, 9, 0, 0, 9, 9, 9, 9, 1, 1, 9, 0, 0, 0, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9]
membership_jazz_3_4596 = [8, 5, 3, 3, 3, 3, 5, 8, 8, 5, 5, 5, 3, 5, 8, 8, 8, 3, 5, 8, 3, 5, 8, 8, 3, 3, 3, 3, 3, 5, 5, 8, 8, 5, 8, 5, 3, 8, 3, 8, 3, 8, 5, 8, 3, 8, 3, 8, 5, 8, 3, 5, 5, 5, 5, 5, 5, 8, 5, 8, 5, 8, 8, 8, 8, 8, 5, 8, 5, 5, 5, 5, 3, 5, 3, 3, 3, 8, 3, 8, 5, 5, 5, 5, 3, 3, 5, 3, 5, 3, 8, 3, 5, 5, 8, 3, 3, 8, 8, 8, 8, 3, 5, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 3, 8, 5, 5, 8, 8, 5, 8, 8, 3, 5, 3, 5, 3, 5, 5, 8, 8, 3, 8, 8, 5, 5, 3, 8, 3, 5, 5, 5, 3, 3, 5, 3, 3, 3, 5, 5, 3, 3, 8, 3, 3, 3, 5, 8, 3, 5, 8, 3, 5, 5, 8, 3, 8, 3, 5, 8, 3, 3, 5, 5, 3, 5, 5, 8, 3, 3, 5, 5, 3, 5, 5, 8, 8, 3, 5, 3, 5, 5, 5, 5, 5, 5, 3]
membership_polbooks_6_5466 = [5, 5, 5, 8, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 5, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 8, 2, 2, 8, 8, 8, 1, 1, 2, 4, 4, 3, 4, 4, 2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 2, 2]
membership_polbooks_6_5482 = [7, 7, 7, 1, 7, 7, 7, 7, 1, 1, 4, 1, 1, 1, 1, 4, 4, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 6, 7, 6, 6, 1, 4, 4, 4, 1, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 4, 1, 1, 3, 0, 0, 6, 0, 0, 3, 3, 6, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 6, 6, 6, 3, 3]
membership_polbooks_5_5457 = [9, 9, 9, 2, 9, 9, 9, 9, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 9, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 2, 2, 2, 2, 2, 7, 5, 5, 3, 5, 5, 7, 7, 3, 7, 7, 7, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7]
network9_5_2933 = [10, 13, 13, 10, 6, 9, 9, 9, 13, 10, 9, 10, 9, 9, 9, 13, 9, 13, 10, 9, 10, 6, 10, 6, 6, 10, 10, 13, 13, 10, 6, 10, 9, 9, 9, 6, 13, 6, 13, 10, 13, 13, 10, 9, 9, 10, 13, 6, 10, 9, 13, 10, 9, 9, 13, 6, 10, 13, 9, 10, 13, 10, 9, 10, 10, 10, 10, 9, 6, 9, 9, 10, 9, 9, 9, 6, 9, 9, 9, 6, 6, 13, 10, 9, 9, 9, 6, 9, 6, 10, 9, 6, 10, 13, 10, 10, 10, 10, 13, 9, 9, 9, 6, 9, 10, 10, 10, 13, 6, 9, 10, 10, 13, 6, 9, 6, 6, 13, 13, 10, 10, 10, 6, 13, 10, 10, 10, 13, 6, 9, 10, 10, 6, 13, 6, 9, 13, 13, 10, 9, 9, 10, 9, 10, 6, 9, 10, 9, 13, 9, 10, 9, 10, 10, 10, 10, 6, 13, 10, 6, 6, 10, 6, 13, 10, 10, 6, 10, 9, 13, 9, 6, 6, 10, 9, 6, 9, 10, 9, 9, 10, 13, 6, 9, 6, 10, 9, 9, 9, 10, 9, 6, 13, 6, 9, 9, 6, 13, 9, 13, 10, 13, 10, 9, 9, 13, 10, 9, 10, 10, 13, 9, 9, 6, 9, 10, 9, 10, 10, 9, 9, 10, 13, 10, 9, 9, 9, 10, 9, 10, 6, 10, 13, 10, 10, 10, 13, 6, 9, 9, 13, 13, 9, 10, 10, 9, 10, 13, 6, 9, 13, 10, 10, 9, 6, 13, 13, 13, 10, 6, 13, 9, 13, 13, 10, 10, 9, 9, 6, 10, 10, 13, 10, 9, 13, 13, 9, 10, 10, 13, 6, 9, 13, 9, 9, 10, 6, 10, 10, 9, 9, 13, 9, 6, 13, 10, 10, 10, 9, 13, 6, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 13, 6, 13, 9, 13, 10, 13, 6, 10, 10, 6, 10, 13, 10, 6, 13, 10, 9, 10, 13, 10, 13, 13, 10, 9, 9, 10, 9, 10, 13, 10, 9, 9, 6, 9, 10, 10, 10, 13, 9, 10, 9, 6, 13, 9, 6, 10, 6, 6, 10, 10, 10, 13, 9, 10, 13, 13, 9, 10, 13, 10, 9, 10, 6, 9, 9, 9, 9, 13, 10, 10, 13, 6, 6, 9, 9, 9, 10, 10, 6, 10, 9, 6, 9, 13, 13, 9, 9, 10, 13, 6, 6, 6, 10, 10, 9, 6, 6, 13, 10, 10, 9, 9, 10, 6, 6, 13, 6, 9, 13, 9, 13, 15, 9, 13, 9, 13, 10, 13, 13, 10, 9, 13, 13, 9, 10, 9, 10, 10, 9, 10, 6, 13, 10, 9, 10, 9, 9, 13, 13, 13, 9, 9, 9, 10, 13, 9, 10, 10, 6, 6, 13, 9, 13, 6, 6, 13, 10, 9, 13, 10, 9, 9, 9, 13, 9, 10, 13, 6, 6, 10, 13, 13, 13, 13, 13, 10, 10, 13, 6, 6, 10, 9, 10, 10, 10, 10, 9, 9, 10, 9, 9, 13, 13, 6, 10, 9, 9, 9, 10, 13, 13, 10, 10, 13, 10, 6, 9, 10, 9, 6, 10, 6, 6, 13, 9, 6, 9, 10, 9, 9, 13, 10, 9, 10, 10, 13, 10, 10, 10, 9, 10, 13, 13, 9, 9, 6, 6, 10, 10, 6, 6, 10, 13, 9, 13, 6, 10, 10, 13, 9, 10, 6, 9, 9, 9, 6, 10, 10, 6, 10, 6, 13, 6, 13, 10, 6, 9, 13, 6, 13, 9, 9, 10, 13, 13, 13, 10, 9, 13, 10, 6, 10, 9, 10, 9, 6, 9, 6, 9, 9, 13, 9, 9, 10, 9, 13, 13, 9, 9, 13, 9, 9, 9, 6, 9, 6, 9, 13, 6, 10, 9, 10, 10, 9, 9, 9, 9, 9, 13, 9, 6, 9, 9, 9, 9, 9, 13, 10, 9, 13, 6, 9, 13, 10, 9, 9, 10, 13, 9, 13, 10, 13, 9, 10, 10, 9, 10, 6, 9, 13, 9, 9, 10, 9, 9, 13, 6, 10, 13, 9, 9, 13, 6, 13, 10, 6, 10, 10, 13, 13, 10, 6, 9, 9, 9, 10, 6, 9, 13, 10, 9, 9, 9, 9, 9, 9, 9, 6, 9, 6, 13, 10, 13, 10, 13, 6, 9, 10, 9, 9, 10, 9, 10, 10, 10, 9, 9, 10, 9, 10, 6, 9, 10, 10, 6, 10, 10, 13, 9, 9, 10, 9, 9, 13, 6, 13, 10, 13, 13, 13, 9, 6, 13, 10, 13, 13, 9, 13, 10, 10, 10, 13, 9, 13, 10, 10, 10, 6, 9, 9, 13, 10, 6, 10, 9, 10, 9, 9, 13, 6, 13, 9, 9, 13, 10, 9, 13, 9, 6, 9, 9, 6, 6, 10, 10, 13, 10, 9, 9, 9, 10, 10, 9, 10, 6, 9, 13, 6, 10, 9, 9, 13, 13, 13, 6, 6, 9, 10, 10, 13, 13, 13, 9, 10, 9, 9, 10, 10, 10, 9, 6, 13, 6, 10, 9, 10, 10, 9, 10, 13, 9, 10, 10, 6, 13, 10, 10, 9, 13, 6, 10, 13, 9, 9, 6, 13, 13, 9, 9, 6, 9, 10, 6, 6, 13, 10, 10, 10, 9, 13, 6, 13, 9, 6, 6, 10, 10, 13, 9, 13, 10, 9, 13, 9, 9, 10, 9, 13, 10, 6, 6, 9, 9, 9, 9, 13, 9, 6, 10, 10, 9, 9, 6, 13, 13, 9, 6, 9, 6, 9, 10, 10, 13, 9, 10, 10, 13, 10, 9, 9, 6, 10, 10, 10, 13, 9, 10, 13, 6, 9, 9, 9, 10, 13, 9, 13, 9, 9, 9, 6, 10, 10, 6, 9, 13, 10, 10, 9, 9, 9, 9, 13, 10, 9, 6, 10, 10, 13, 10, 6, 6, 10, 9, 10, 10, 10, 9, 6, 13, 10, 9, 9, 10, 13, 9, 13, 13, 6, 9, 10, 10, 10, 9, 10, 9, 9, 6, 9, 10, 9, 10, 6, 13, 10, 9, 13, 6, 9, 13, 9, 10, 9, 13, 10, 6, 6, 9]
network8_3_3092 = [0, 32, 0, 0, 32, 0, 7, 32, 7, 7, 7, 0, 32, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 32, 7, 0, 0, 0, 0, 7, 0, 32, 0, 0, 32, 32, 0, 0, 0, 0, 0, 7, 0, 0, 0, 32, 7, 0, 0, 32, 7, 7, 0, 32, 7, 32, 7, 32, 0, 0, 0, 0, 7, 32, 32, 7, 32, 32, 32, 0, 7, 7, 0, 0, 0, 7, 0, 7, 7, 7, 7, 0, 7, 0, 32, 32, 32, 32, 0, 32, 0, 0, 32, 7, 7, 0, 0, 32, 0, 0, 7, 32, 32, 32, 32, 7, 7, 32, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 7, 7, 32, 32, 7, 32, 32, 32, 7, 0, 7, 0, 0, 32, 7, 32, 0, 7, 0, 0, 0, 32, 0, 7, 7, 7, 32, 0, 7, 0, 7, 0, 0, 0, 32, 0, 32, 0, 32, 0, 7, 7, 7, 7, 0, 0, 32, 32, 0, 0, 32, 7, 32, 0, 0, 32, 7, 32, 0, 32, 0, 0, 0, 0, 0, 32, 32, 32, 7, 32, 32, 0, 0, 7, 32, 32, 7, 0, 0, 32, 0, 7, 32, 7, 0, 7, 32, 32, 0, 7, 7, 0, 32, 0, 32, 7, 32, 7, 0, 0, 32, 7, 32, 0, 0, 32, 0, 7, 0, 7, 7, 7, 32, 7, 0, 0, 32, 32, 32, 7, 32, 0, 32, 0, 32, 7, 7, 7, 0, 0, 0, 7, 32, 7, 7, 7, 32, 0, 32, 0, 0, 32, 7, 32, 32, 7, 7, 32, 0, 0, 0, 0, 7, 7, 32, 0, 7, 0, 0, 7, 0, 7, 0, 7, 32, 32, 0, 0, 0, 32, 32, 0, 32, 7, 7, 32, 7, 7, 0, 32, 0, 32, 32, 0, 7, 32, 7, 0, 32, 0, 0, 0, 0, 7, 32, 32, 7, 7, 7, 0, 32, 32, 0, 32, 0, 32, 0, 32, 7, 0, 7, 32, 32, 32, 7, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 7, 0, 7, 0, 0, 0, 7, 7, 7, 32, 0, 7, 0, 7, 32, 7, 7, 32, 0, 7, 7, 0, 0, 7, 7, 32, 7, 0, 32, 0, 7, 32, 0, 7, 32, 32, 0, 7, 32, 0, 0, 32, 7, 32, 7, 32, 32, 32, 32, 7, 0, 32, 7, 7, 0, 7, 0, 7, 0, 7, 32, 7, 7, 32, 32, 0, 0, 0, 7, 7, 7, 32, 7, 0, 7, 0, 0, 7, 32, 7, 32, 0, 7, 7, 7, 0, 0, 7, 0, 0, 32, 32, 0, 0, 0, 32, 32, 0, 0, 0, 0, 32, 32, 0, 0, 7, 0, 7, 7, 0, 0, 32, 32, 32, 0, 0, 32, 0, 0, 32, 7, 0, 32, 32, 7, 32, 7, 0, 32, 7, 0, 7, 0, 0, 32, 0, 7, 0, 0, 0, 7, 32, 0, 32, 7, 7, 32, 7, 7, 0, 7, 32, 32, 7, 32, 0, 7, 32, 0, 32, 0, 32, 7, 0, 7, 0, 7, 32, 7, 7, 32, 7, 32, 32, 0, 0, 7, 0, 0, 7, 0, 32, 32, 32, 7, 7, 32, 7, 0, 0, 0, 32, 32, 0, 7, 32, 0, 7, 0, 7, 32, 32, 0, 0, 0, 0, 0, 0, 32, 7, 32, 7, 0, 7, 32, 0, 7, 0, 7, 0, 7, 0, 0, 32, 0, 7, 32, 32, 0, 32, 0, 0, 7, 7, 32, 32, 32, 7, 0, 7, 0, 0, 32, 0, 0, 32, 0, 0, 32, 0, 0, 0, 7, 7, 0, 0, 7, 0, 7, 0, 32, 32, 0, 0, 7, 0, 0, 7, 32, 0, 7, 32, 0, 0, 0, 7, 32, 7, 0, 7, 0, 7, 0, 7, 0, 7, 32, 7, 0, 32, 32, 0, 7, 0, 32, 0, 7, 0, 7, 7, 0, 0, 0, 0, 0, 0, 7, 7, 0, 32, 7, 32, 7, 0, 0, 32, 7, 0, 0, 0, 32, 32, 7, 0, 0, 7, 7, 0, 32, 0, 0, 7, 0, 32, 32, 32, 32, 0, 0, 7, 0, 7, 7, 0, 0, 0, 32, 7, 0, 32, 0, 7, 7, 32, 32, 0, 0, 7, 7, 7, 0, 0, 32, 0, 0, 32, 32, 32, 32, 7, 7, 0, 7, 7, 0, 32, 0, 32, 0, 7, 0, 32, 0, 32, 0, 32, 32, 7, 32, 0, 7, 0, 0, 7, 32, 32, 0, 32, 0, 7, 7, 32, 0, 0, 0, 32, 0, 32, 7, 0, 0, 7, 0, 32, 7, 0, 7, 7, 0, 0, 7, 0, 7, 32, 32, 0, 32, 0, 0, 7, 7, 0, 0, 0, 0, 0, 7, 7, 32, 0, 0, 7, 32, 32, 0, 7, 7, 0, 0, 0, 0, 0, 7, 32, 7, 32, 7, 0, 7, 0, 0, 32, 7, 0, 0, 0, 32, 7, 0, 0, 32, 7, 32, 0, 32, 7, 0, 7, 0, 7, 7, 7, 7, 7, 7, 32, 32, 7, 0, 32, 32, 32, 7, 7, 7, 32, 7, 7, 32, 32, 32, 32, 0, 32, 7, 32, 0, 0, 0, 32, 32, 32, 32, 0, 32, 7, 7, 32, 0, 7, 7, 32, 0, 32, 0, 7, 32, 7, 32, 0, 0, 0, 0, 7, 7, 7, 32, 0, 0, 32, 7, 0, 7, 32, 32, 7, 7, 0, 0, 32, 32, 32, 0, 32, 7, 32, 0, 7, 0, 0, 0, 7, 32, 7, 7, 7, 0, 7, 7, 32, 32, 0, 32, 7, 32, 7, 32, 7, 0, 0, 32, 7, 0, 0, 0, 0, 7, 0, 0, 32, 7, 7, 32, 0, 0, 32, 7, 32, 7, 0, 0, 0, 7, 0, 0, 32, 7, 32, 32, 32, 0, 7, 32, 0, 0, 32, 7, 32, 32, 7, 0, 7, 32, 7, 0, 0, 0, 7, 7, 32, 32, 0, 0, 7, 7, 32, 32, 32, 0, 32, 0, 32, 32, 0, 0, 0, 7, 7, 32, 32, 0, 32, 0, 7, 7, 0, 32]
network8_3_2359 = [21, 8, 24, 8, 24, 24, 21, 8, 24, 24, 21, 24, 21, 8, 8, 24, 21, 21, 21, 24, 24, 21, 24, 21, 24, 8, 21, 8, 24, 24, 24, 24, 21, 8, 8, 21, 24, 21, 8, 24, 8, 24, 8, 24, 8, 8, 21, 24, 21, 24, 21, 24, 21, 21, 24, 21, 8, 21, 21, 21, 8, 21, 24, 8, 21, 21, 21, 24, 8, 8, 21, 24, 24, 8, 24, 8, 24, 21, 8, 8, 8, 24, 21, 21, 8, 21, 21, 21, 21, 21, 24, 8, 8, 8, 8, 8, 8, 24, 8, 21, 24, 21, 24, 21, 24, 21, 8, 21, 21, 24, 24, 21, 8, 24, 21, 24, 8, 24, 21, 24, 24, 24, 24, 21, 8, 24, 24, 8, 21, 21, 24, 24, 21, 24, 8, 21, 8, 8, 24, 24, 24, 8, 8, 24, 21, 21, 21, 21, 21, 21, 8, 21, 8, 24, 8, 21, 21, 21, 21, 8, 21, 8, 8, 24, 8, 24, 8, 8, 24, 21, 24, 8, 8, 8, 24, 24, 21, 21, 21, 24, 24, 8, 21, 8, 21, 8, 24, 8, 8, 21, 8, 21, 24, 24, 21, 24, 8, 21, 24, 24, 21, 21, 24, 8, 24, 21, 24, 21, 24, 8, 8, 8, 8, 21, 21, 8, 8, 8, 24, 21, 21, 8, 24, 24, 8, 24, 21, 21, 24, 21, 24, 21, 21, 21, 24, 24, 24, 8, 24, 24, 24, 21, 8, 21, 8, 24, 8, 21, 21, 8, 21, 24, 24, 21, 21, 24, 21, 8, 21, 8, 8, 21, 21, 24, 21, 21, 8, 21, 21, 8, 8, 24, 8, 21, 8, 21, 8, 24, 8, 24, 21, 8, 21, 8, 24, 8, 21, 21, 24, 21, 24, 24, 24, 21, 21, 24, 8, 24, 21, 21, 21, 21, 21, 21, 21, 21, 24, 8, 21, 24, 21, 21, 24, 8, 24, 8, 24, 21, 21, 24, 8, 21, 24, 24, 24, 24, 21, 21, 8, 21, 8, 8, 24, 24, 24, 24, 8, 24, 21, 21, 21, 24, 8, 24, 21, 24, 24, 24, 8, 24, 8, 24, 24, 24, 21, 21, 24, 24, 24, 24, 8, 8, 21, 8, 21, 21, 8, 8, 8, 8, 24, 21, 21, 24, 24, 8, 21, 21, 21, 21, 24, 8, 8, 24, 24, 21, 8, 8, 8, 8, 21, 24, 8, 8, 8, 21, 21, 21, 21, 8, 21, 8, 24, 21, 24, 21, 21, 21, 8, 21, 8, 21, 24, 8, 8, 24, 24, 21, 21, 21, 21, 8, 21, 8, 24, 21, 8, 24, 21, 8, 24, 24, 8, 24, 21, 24, 24, 8, 24, 8, 21, 21, 21, 8, 21, 8, 21, 21, 21, 8, 24, 24, 24, 24, 24, 21, 24, 21, 21, 24, 8, 8, 21, 24, 21, 24, 24, 8, 8, 21, 24, 8, 21, 21, 8, 21, 21, 8, 24, 21, 24, 21, 21, 21, 24, 8, 21, 24, 24, 21, 8, 24, 21, 24, 24, 24, 21, 24, 24, 24, 24, 24, 21, 24, 8, 21, 24, 8, 24, 24, 21, 21, 24, 24, 24, 21, 24, 8, 8, 21, 24, 21, 8, 21, 8, 8, 8, 21, 8, 21, 21, 24, 21, 8, 21, 21, 24, 21, 8, 21, 8, 21, 21, 24, 24, 21, 21, 8, 8, 24, 8, 24, 8, 24, 21, 21, 24, 21, 21, 24, 24, 24, 24, 24, 24, 8, 21, 24, 24, 8, 21, 21, 24, 21, 24, 8, 21, 8, 21, 8, 8, 8, 21, 8, 8, 24, 24, 21, 21, 8, 8, 21, 24, 21, 24, 24, 24, 21, 8, 24, 24, 21, 21, 21, 21, 8, 21, 24, 24, 21, 24, 21, 8, 21, 8, 8, 21, 21, 21, 21, 24, 24, 8, 24, 24, 24, 21, 8, 24, 8, 8, 21, 8, 24, 8, 8, 8, 21, 24, 24, 8, 24, 21, 24, 21, 21, 21, 8, 8, 8, 24, 21, 24, 24, 21, 8, 21, 21, 21, 24, 24, 8, 21, 24, 8, 8, 21, 8, 24, 24, 8, 24, 24, 8, 21, 24, 21, 21, 8, 8, 8, 21, 21, 24, 8, 24, 21, 8, 24, 8, 24, 24, 8, 24, 24, 8, 24, 8, 8, 8, 21, 21, 21, 21, 21, 24, 21, 8, 21, 24, 21, 21, 21, 24, 21, 21, 21, 21, 21, 24, 8, 24, 8, 21, 8, 21, 8, 21, 21, 21, 24, 21, 21, 24, 24, 24, 8, 21, 24, 21, 8, 21, 24, 8, 24, 21, 24, 21, 8, 8, 21, 8, 24, 24, 8, 24, 24, 21, 24, 8, 24, 24, 8, 21, 8, 8, 8, 24, 24, 8, 8, 24, 21, 21, 8, 8, 8, 8, 8, 24, 21, 21, 21, 24, 21, 21, 21, 21, 24, 24, 21, 8, 24, 21, 24, 21, 24, 24, 21, 21, 24, 24, 24, 24, 24, 21, 8, 21, 21, 21, 24, 24, 24, 21, 8, 8, 24, 24, 24, 8, 24, 8, 8, 8, 24, 21, 21, 21, 8, 21, 8, 24, 8, 21, 21, 8, 8, 21, 8, 24, 21, 24, 21, 8, 24, 24, 8, 21, 24, 8, 21, 8, 21, 21, 21, 21, 24, 21, 21, 21, 24, 8, 24, 24, 8, 8, 21, 8, 8, 21, 8, 24, 21, 24, 8, 24, 24, 21, 21, 21, 21, 8, 21, 24, 8, 8, 24, 8, 24, 8, 8, 21, 24, 21, 8, 21, 8, 8, 8, 21, 21, 8, 24, 21, 24, 21, 8, 24, 8, 8, 8, 8, 24, 8, 8, 8, 21, 8, 24, 24, 24, 24, 8, 24, 8, 21, 24, 24, 21, 21, 8, 24, 8, 8, 21, 24, 8, 21, 21, 24, 8, 8, 8, 21, 8, 21, 21, 24, 24, 24, 21, 24, 21, 8, 8, 24, 24, 8, 8, 8, 24, 24, 24, 8, 21, 8, 8, 21, 21, 8, 21, 8, 24, 24, 24, 8, 21, 8, 24, 24, 21, 24, 24, 24, 21, 24, 21, 24, 24, 8, 24, 24, 24, 8, 21, 24, 24, 21, 24, 8]
karate_707 = [2, 2, 2, 2, 1, 1, 1, 2, 3, 3, 1, 2, 2, 2, 3, 3, 1, 2, 3, 2, 3, 2, 3, 3, 0, 0, 3, 3, 0, 3, 3, 0, 3, 3]
email_34 = [691, 691, 691, 318, 691, 691, 691, 691, 691, 941, 691, 434, 691, 941, 434, 996, 673, 691, 691, 691, 691, 691, 691, 941, 691, 691, 691, 691, 1110, 996, 419, 691, 941, 941, 691, 691, 691, 691, 691, 996, 691, 419, 691, 1047, 691, 318, 691, 691, 996, 691, 691, 691, 318, 691, 996, 996, 318, 318, 318, 318, 459, 318, 318, 318, 318, 318, 318, 318, 318, 941, 318, 318, 691, 996, 434, 434, 996, 941, 996, 996, 691, 941, 691, 434, 996, 332, 691, 996, 332, 318, 896, 996, 332, 332, 332, 332, 691, 752, 332, 332, 996, 316, 691, 996, 996, 545, 996, 941, 941, 941, 941, 941, 941, 941, 673, 996, 941, 996, 941, 941, 941, 419, 941, 941, 673, 691, 996, 996, 996, 996, 691, 459, 691, 691, 691, 459, 691, 691, 434, 434, 434, 434, 1047, 434, 434, 434, 434, 434, 434, 434, 691, 434, 141, 996, 691, 896, 419, 352, 1047, 690, 434, 996, 941, 941, 941, 941, 941, 941, 941, 941, 996, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 434, 434, 434, 691, 434, 545, 332, 434, 332, 996, 996, 996, 673, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 721, 673, 673, 662, 691, 691, 691, 691, 691, 691, 691, 941, 545, 691, 941, 316, 691, 691, 691, 691, 691, 459, 691, 691, 691, 547, 691, 691, 419, 691, 691, 691, 673, 896, 545, 996, 996, 691, 691, 691, 996, 316, 691, 332, 434, 545, 896, 691, 419, 691, 673, 996, 691, 1047, 673, 316, 545, 941, 691, 318, 673, 1047, 318, 318, 673, 996, 996, 673, 996, 941, 996, 941, 673, 941, 996, 691, 1047, 434, 1077, 1092, 419, 691, 996, 691, 996, 545, 691, 1110, 1110, 1110, 1110, 760, 1110, 545, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 419, 691, 419, 1047, 419, 332, 419, 996, 419, 691, 316, 691, 419, 941, 996, 545, 691, 691, 141, 996, 662, 691, 691, 545, 691, 434, 673, 141, 419, 545, 662, 996, 996, 662, 996, 996, 545, 996, 673, 691, 545, 332, 434, 691, 318, 691, 691, 332, 691, 691, 547, 419, 419, 419, 419, 419, 419, 419, 419, 1047, 1047, 996, 352, 419, 419, 691, 352, 1047, 332, 419, 141, 996, 996, 673, 332, 419, 691, 1047, 1047, 1047, 1047, 1047, 1047, 141, 1047, 742, 545, 434, 332, 691, 409, 419, 332, 316, 545, 691, 545, 318, 318, 318, 332, 318, 1047, 760, 419, 1047, 996, 996, 996, 996, 996, 691, 996, 996, 547, 691, 691, 996, 316, 691, 691, 141, 545, 545, 316, 332, 545, 545, 332, 545, 141, 409, 691, 1003, 691, 332, 332, 662, 545, 996, 996, 459, 409, 996, 996, 996, 1077, 318, 409, 318, 1092, 1092, 1077, 1077, 409, 409, 318, 409, 409, 318, 673, 318, 737, 941, 318, 318, 673, 318, 737, 660, 896, 318, 459, 459, 996, 1047, 434, 318, 318, 318, 318, 318, 318, 547, 409, 318, 545, 318, 318, 996, 318, 996, 662, 737, 662, 419, 318, 318, 760, 662, 760, 941, 941, 941, 409, 545, 318, 318, 318, 545, 318, 318, 545, 1047, 419, 662, 996, 662, 996, 545, 545, 996, 545, 1047, 545, 316, 547, 434, 434, 760, 434, 996, 760, 545, 941, 316, 316, 434, 434, 545, 941, 434, 1047, 141, 434, 419, 941, 459, 996, 419, 434, 691, 419, 996, 996, 996, 691, 691, 691, 545, 434, 141, 141, 996, 996, 996, 996, 996, 332, 332, 996, 996, 996, 332, 332, 332, 318, 332, 737, 332, 332, 332, 896, 332, 902, 896, 896, 996, 419, 996, 996, 996, 332, 332, 332, 332, 332, 332, 752, 332, 996, 332, 332, 691, 691, 332, 752, 752, 996, 459, 691, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 545, 545, 545, 545, 545, 352, 221, 545, 545, 352, 545, 691, 545, 545, 996, 996, 673, 941, 941, 673, 996, 673, 673, 673, 996, 691, 996, 996, 996, 996, 459, 996, 691, 941, 419, 419, 434, 673, 941, 691, 996, 673, 673, 996, 996, 996, 996, 996, 691, 141, 896, 419, 352, 941, 1077, 545, 332, 1077, 434, 691, 1110, 691, 1109, 691, 459, 459, 459, 434, 434, 434, 434, 434, 141, 1047, 1047, 691, 911, 1047, 1047, 911, 434, 434, 332, 434, 434, 434, 760, 434, 434, 434, 996, 141, 141, 141, 141, 141, 141, 742, 332, 352, 352, 352, 352, 691, 1047, 409, 690, 690, 941, 316, 941, 941, 660, 662, 434, 545, 691, 545, 545, 545, 545, 419, 332, 547, 691, 996, 673, 996, 996, 996, 996, 996, 419, 996, 996, 996, 1047, 996, 996, 996, 996, 760, 996, 1110, 996, 996, 996, 419, 996, 996, 996, 996, 996, 721, 996, 691, 409, 547, 691, 1092, 691, 691, 691, 691, 1077, 545, 1003, 545, 545, 332, 662, 1077, 316, 691, 691, 545, 691, 691, 691, 419, 459, 547, 547, 352, 1047, 673, 673, 673, 141, 691, 896, 545, 545, 691, 691, 1077, 409, 1077, 691, 434, 434, 545, 896, 316, 691, 691, 691, 1047, 760, 1109, 673, 996, 691, 1047, 1047, 673, 316, 316, 316, 316, 332, 673, 673, 673, 673, 996, 673, 673, 673, 941, 996, 691, 1047, 1047, 1047, 1047, 1047, 419, 419, 419, 419, 419, 419, 419, 419, 691, 332, 691, 691, 996, 760, 760, 547, 1110, 1110, 760, 547, 1110, 760, 760, 760, 545, 545, 996, 996, 996, 996, 332, 419, 419, 409, 332, 332, 332, 419, 419, 316, 316, 316, 545, 760, 409, 691, 221, 419, 434, 419, 545, 141, 141, 141, 141, 141, 141, 141, 662, 691, 691, 545, 545, 545, 545, 545, 434, 673, 1092, 141, 673, 141, 141, 545, 760, 673, 996, 673, 332, 332, 332, 332, 332, 691, 691, 911, 691, 419, 419, 1047, 352, 141, 419, 419, 419, 352, 332, 141, 221, 1109, 1109, 1003, 1047, 911, 1047, 1077, 409, 316, 352, 318, 318, 318, 896, 409, 911, 760, 760, 996, 316, 409, 545, 545, 545, 332, 332, 332, 545, 662, 902, 141, 902, 409, 409, 409, 409, 409, 409, 409, 409, 1003, 332, 662, 662, 760, 996, 409, 1077, 409, 1092, 1077, 1077, 409, 737, 409, 1077, 409, 409, 673, 673, 660, 896, 1109, 547, 318, 662, 760, 941, 318, 545, 691, 545, 545, 545, 316, 547, 996, 760, 760, 760, 902, 760, 760, 419, 691, 545, 996, 141, 996, 332, 760, 760, 332, 332, 332, 332, 332, 419, 673, 221, 221, 221, 419, 545, 673, 996, 673, 996, 1114, 409, 1077, 1109, 141, 409, 662, 691, 545, 760, 996, 316, 547, 1047, 1047, 1047, 316, 1047, 316, 673, 1047, 419, 332, 332, 316, 545, 141, 352, 419, 318, 896, 545, 409, 662, 545, 332, 221, 1114]
email_17 = [896, 896, 896, 318, 896, 896, 896, 896, 896, 673, 896, 434, 896, 673, 434, 996, 673, 896, 896, 896, 896, 896, 896, 673, 896, 896, 896, 896, 662, 996, 419, 896, 673, 673, 896, 896, 896, 896, 896, 996, 896, 419, 896, 911, 896, 318, 896, 896, 996, 896, 896, 896, 318, 896, 996, 996, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 318, 673, 318, 318, 896, 996, 434, 434, 996, 673, 996, 996, 896, 673, 911, 434, 996, 332, 896, 996, 332, 318, 896, 996, 332, 332, 332, 332, 896, 752, 332, 332, 996, 409, 896, 996, 996, 545, 996, 673, 673, 673, 673, 673, 673, 673, 673, 996, 673, 996, 673, 673, 673, 419, 673, 673, 673, 896, 996, 996, 996, 996, 896, 318, 896, 896, 896, 318, 896, 896, 434, 434, 434, 434, 911, 434, 434, 434, 434, 434, 434, 434, 896, 434, 911, 996, 896, 896, 419, 545, 911, 690, 434, 996, 673, 673, 673, 673, 673, 673, 673, 673, 996, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 673, 434, 434, 434, 896, 434, 545, 332, 434, 332, 996, 996, 996, 673, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 721, 673, 673, 662, 896, 896, 896, 896, 896, 896, 896, 673, 545, 896, 673, 409, 896, 896, 896, 896, 896, 318, 896, 896, 896, 547, 896, 896, 419, 896, 896, 896, 673, 896, 545, 996, 996, 896, 896, 896, 996, 409, 896, 332, 434, 545, 896, 896, 419, 896, 673, 996, 896, 911, 673, 409, 545, 673, 896, 318, 673, 911, 318, 318, 673, 996, 996, 673, 996, 673, 996, 673, 673, 673, 996, 896, 911, 434, 409, 409, 419, 896, 996, 896, 996, 545, 896, 662, 662, 662, 662, 662, 662, 545, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 419, 896, 419, 911, 419, 332, 419, 996, 419, 896, 409, 896, 419, 673, 996, 545, 896, 896, 911, 996, 662, 896, 896, 545, 896, 434, 673, 911, 419, 545, 662, 996, 996, 662, 996, 996, 545, 996, 673, 896, 545, 332, 434, 896, 318, 896, 896, 332, 896, 896, 547, 419, 419, 419, 419, 419, 419, 419, 419, 911, 911, 996, 545, 419, 419, 896, 545, 911, 332, 911, 911, 996, 996, 419, 332, 419, 896, 911, 911, 911, 911, 911, 911, 911, 911, 911, 545, 434, 332, 896, 409, 419, 332, 409, 545, 896, 545, 318, 318, 318, 332, 318, 911, 662, 419, 911, 996, 996, 996, 996, 996, 896, 996, 996, 547, 896, 896, 996, 409, 896, 896, 911, 545, 545, 409, 332, 545, 545, 332, 545, 911, 409, 896, 545, 896, 332, 332, 662, 545, 996, 996, 318, 409, 996, 996, 996, 409, 318, 409, 318, 409, 409, 409, 409, 409, 409, 318, 409, 409, 318, 673, 318, 409, 673, 318, 318, 673, 318, 409, 318, 318, 318, 318, 318, 996, 911, 434, 318, 318, 318, 318, 318, 318, 547, 409, 318, 545, 318, 318, 996, 318, 996, 662, 409, 662, 419, 318, 318, 662, 662, 662, 673, 673, 673, 409, 545, 318, 318, 318, 545, 318, 318, 545, 911, 419, 662, 996, 662, 996, 545, 545, 996, 545, 911, 545, 409, 547, 434, 434, 662, 434, 996, 662, 545, 673, 409, 409, 434, 434, 545, 673, 434, 911, 911, 434, 419, 673, 318, 996, 419, 434, 896, 419, 996, 996, 996, 896, 896, 896, 545, 434, 911, 911, 996, 996, 996, 996, 996, 332, 332, 996, 996, 996, 332, 332, 332, 318, 332, 409, 332, 332, 332, 896, 332, 896, 896, 896, 996, 419, 996, 996, 996, 332, 332, 332, 332, 332, 332, 752, 332, 996, 332, 332, 896, 896, 332, 752, 752, 996, 318, 896, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 545, 545, 545, 545, 545, 545, 221, 545, 545, 545, 545, 896, 545, 545, 996, 996, 673, 673, 673, 673, 996, 673, 673, 673, 996, 896, 996, 996, 996, 996, 318, 996, 896, 673, 419, 419, 434, 673, 673, 896, 996, 673, 673, 996, 996, 996, 996, 996, 896, 911, 896, 419, 545, 673, 409, 545, 332, 409, 434, 896, 662, 896, 419, 896, 318, 318, 318, 434, 434, 434, 434, 434, 911, 911, 911, 896, 911, 911, 911, 911, 434, 434, 332, 434, 434, 434, 662, 434, 434, 434, 996, 911, 911, 911, 911, 911, 911, 911, 332, 545, 545, 545, 545, 896, 911, 409, 690, 690, 673, 409, 673, 673, 318, 662, 434, 545, 896, 545, 545, 545, 545, 419, 332, 547, 896, 996, 673, 996, 996, 996, 996, 996, 419, 996, 996, 996, 911, 996, 996, 996, 996, 662, 996, 662, 996, 996, 996, 419, 996, 996, 996, 996, 996, 721, 996, 896, 409, 547, 896, 409, 896, 896, 896, 896, 409, 545, 545, 545, 545, 332, 662, 409, 409, 896, 896, 545, 896, 896, 896, 419, 318, 547, 547, 545, 911, 673, 673, 673, 911, 896, 896, 545, 545, 896, 896, 409, 409, 409, 896, 434, 434, 545, 896, 409, 896, 896, 896, 911, 662, 419, 673, 996, 896, 911, 911, 673, 409, 409, 409, 409, 332, 673, 673, 673, 673, 996, 673, 673, 673, 673, 996, 896, 911, 911, 911, 911, 911, 419, 419, 419, 419, 419, 419, 419, 419, 896, 332, 896, 896, 996, 662, 662, 547, 911, 662, 662, 547, 662, 662, 662, 662, 545, 545, 996, 996, 996, 996, 332, 419, 419, 409, 332, 332, 332, 419, 419, 409, 409, 409, 545, 662, 409, 896, 221, 419, 434, 419, 545, 911, 911, 911, 911, 911, 911, 911, 662, 896, 896, 545, 545, 545, 545, 545, 434, 673, 409, 911, 673, 911, 911, 545, 662, 673, 996, 673, 332, 332, 332, 332, 332, 896, 896, 911, 896, 419, 419, 911, 545, 911, 419, 419, 419, 545, 332, 911, 221, 419, 419, 545, 911, 911, 911, 409, 409, 409, 545, 318, 318, 318, 896, 409, 911, 662, 662, 996, 409, 409, 545, 545, 545, 332, 332, 332, 545, 662, 911, 911, 911, 409, 409, 409, 409, 409, 409, 409, 409, 545, 332, 662, 662, 662, 996, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 409, 673, 673, 318, 896, 419, 547, 318, 662, 662, 673, 318, 545, 896, 545, 545, 545, 409, 547, 996, 662, 662, 662, 911, 662, 662, 419, 896, 545, 996, 911, 996, 332, 662, 662, 332, 332, 332, 332, 332, 419, 673, 221, 221, 221, 419, 545, 673, 996, 673, 996, 1114, 409, 409, 419, 911, 409, 662, 896, 545, 662, 996, 409, 547, 911, 911, 911, 409, 911, 409, 673, 911, 419, 332, 332, 409, 545, 911, 545, 419, 318, 896, 545, 409, 662, 545, 332, 221, 1114]
# test707 = [0, 0, 0, 0, 2, 2, 2, 0, 1, 1, 2, 0, 0, 0, 1, 1, 2, 0, 1, 0, 1, 0, 1, 1, 3, 3, 1, 1, 3, 1, 1, 3, 1, 1]
test = [0, 0, 0, 99, 0, 0, 0, 0, 99, 99, 6, 99, 99, 99, 99, 6, 6, 99, 99, 6, 99, 99, 99, 99, 99, 99, 99, 99, 94, 0, 94, 94, 99, 6, 6, 6, 99, 6, 6, 6, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 42, 42, 99, 99, 6, 99, 99, 42, 87, 87, 94, 87, 87, 42, 42, 94, 42, 42, 42, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 42, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 87, 94, 94, 94, 36, 36]
real_mem =  membership_polbooks_6_5482
reallist = membership_polbooks_6_5482
membership_bestx = test

# for index, i in enumerate(set(membership_bestx)):
#     for index1, r in enumerate(membership_bestx):
#         if r == i:
#             reallist[index1] = index
            
real_c_n = {} #真实社区及该社区中包含的节点
for c_index,c in enumerate(set(real_mem)):
    c_ilist = []
    for index,i in enumerate(real_mem):
        if i == c:
            c_ilist.append(index)      
    real_c_n[c_index] = c_ilist
    
# 验证Ql值
Ql_sum = 0
Qls = []
Cnum = []
for key in real_c_n.keys():
    ilist = real_c_n[key]
    ilist_len = len(ilist)
    Cnum.append(ilist_len)
    ilist_arr = np.asarray(ilist, dtype=int)
    Ql = cfunc.fit_Ql(motif_adj, ilist_arr, ilist_len, W, m)
    Qls.append(Ql)
    Ql_sum += Ql
    print("Ql=", Ql)
print("Ql_sum=", Ql_sum)
print("Qwlmin={}, Qwlmax={}".format(min(Qls), max(Qls)))
print("Cmin={}, Cmax={}\n".format(min(Cnum), max(Cnum)))
bestx_nmi=ig.compare_communities(reallist, membership_bestx, method='nmi', remove_none=False) 
print("nmi=", bestx_nmi)
bestx_Qw=ig.GraphBase.modularity(Gi,membership_bestx,weights)
print("Qw=", bestx_Qw)


## 获得的最优社区划分
bestx_c_n = {}
for c_index,c in enumerate(set(membership_bestx)):
    c_ilist = []
    for index,i in enumerate(membership_bestx):
        if i == c:
            c_ilist.append(index) 
    bestx_c_n[c_index] = c_ilist
    
for r_key in real_c_n.keys():
    # print("=======r_key={}==============".format(r_key))
    r_key_set = set(sorted(real_c_n[r_key],reverse=True))
    for x_key in bestx_c_n.keys():
        x_key_set = set(sorted(bestx_c_n[x_key],reverse=True))
        if not r_key_set.isdisjoint(x_key_set):
            # 两集合包含相同的元素
            if r_key_set.issuperset(x_key_set) or r_key_set.issubset(x_key_set):
                # x是r的子集,或r是x的子集
                if len(r_key_set) != len(x_key_set):
                    print("r={0}_{1}\n与x={2}_{3}集合未划分完全".format(r_key,sorted(list(r_key_set)), x_key,sorted(list(x_key_set))))
                    if len(x_key_set) > len(r_key_set):
                        print("differ_set={}".format(x_key_set.difference(r_key_set)))
                    else:
                        print("differ_set={}".format(r_key_set.difference(x_key_set)))

            else:
                # 两个集合划分不同
                print("r={0}_{1}\n与x={2}_{3}集合有不同划分".format(r_key,sorted(list(r_key_set)), x_key,sorted(list(x_key_set))))



bestx_nmi=ig.compare_communities(reallist, membership_bestx, method='nmi', remove_none=False) 
bestx_Qw=func.fit_Q(Compactness,motif_info, np.asarray(membership_bestx),motif_adj,n,c,W,m,Q_flag)
print("\nfist_bestx_QW={} nmi={}".format(bestx_Qw,bestx_nmi))

membership_bestx[23] = membership_bestx[31]
bestx_Qw=func.fit_Q(Compactness,motif_info, np.asarray(membership_bestx),motif_adj,n,c,W,m,Q_flag)
print("second_bestx_QW={} nmi={}".format(bestx_Qw,bestx_nmi))
 
real_Qw=ig.GraphBase.modularity(Gi,reallist,weights) 
# print("real_QW={} nmi={}".format(real_Qw,real_nmi))
print("\nreal_QW={}\n".format(real_Qw)) 
# Qw_tmp = func.fit_Q(motif_info, np.asarray(membership_bestx),motif_adj,n,c,W,m,Q_flag)
# real_Qw_tmp = func.fit_Q(motif_info, np.asarray(reallist),motif_adj,n,c,W,m,Q_flag)
# print("\nQw_tmp={} real_Qw_tmp={}\n".format(Qw_tmp,real_Qw_tmp)) 



  
# tmplist = [1,39,72,73,90,101,154,171,184,232,249,269,275,316,330,336,446,447,465,504,520,570,577,587,630,700,724,743,757,761,772,776,777,837,872,891,904,914,931,938,939,962,965,979,981,982,993]
# tmplist = [6,20,31,50,63,71,75,93,98,118,119,124,131,140,157,179,194,196,198,203,204,206,226,238,255,260,266,271,285,311,322,374,385,414,421,454,457,472,506,510,517,537,538,553,555,559,562,568,583,590,596,608,652,665,673,677,685,693,696,702,703,708,713,725,727,738,775,782,812,813,844,859,878,892,901,905,921,942,960,964,966,967,989]
# tmplist = [16, 39, 46, 54, 76, 165, 254, 382, 459, 599, 608, 613, 722, 731, 818, 862]
# # tmplist = [20, 28, 46, 48, 57, 82, 103, 105, 145, 168, 182, 189, 215, 223, 230, 243, 253, 256, 281, 295, 297, 307, 345, 354, 368, 371, 378, 384, 388, 397, 412, 426, 431, 473, 481]
# for k in range(c):
#     if membership_bestx.count(k) == 0:
#         for tmp in tmplist:
#             membership_bestx[tmp]=k
# #         break
# membership_bestx[29] = 13
# bestx_Qw1=ig.GraphBase.modularity(Gi,membership_bestx,weights)
# bestx_nmi1=ig.compare_communities(reallist, membership_bestx, method='nmi', remove_none=False) 

# print("\nfist_bestx_QW1={} nmi1={}".format(bestx_Qw1,bestx_nmi1))   

# print("---------------------------")            
# real_nmi=ig.compare_communities(reallist, real_mem, method='nmi', remove_none=False)
# bestx_nmi=ig.compare_communities(reallist, membership_bestx, method='nmi', remove_none=False) 
# bestx_Qw=ig.GraphBase.modularity(Gi,membership_bestx,weights)
# print("second_bestx_QW={} nmi={}".format(bestx_Qw,bestx_nmi))  
# real_Qw=ig.GraphBase.modularity(Gi,reallist,weights) 
# # print("real_QW={} nmi={}".format(real_Qw,real_nmi))
# print("real_QW={}\n".format(real_Qw))   
   

'''
max_Ci_i, max_Ci_i_sum = tmplist[0], 0  #该社区中聚类系数最大的节点
for i in tmplist:
    i_sum = 0
    for j in tmplist:
        i_sum += me_adj[i,j]
    if i_sum > max_Ci_i_sum:
        max_Ci_i_sum = i_sum
        max_Ci_i = i

print("max_Ci_i=",max_Ci_i)

Xlist = tmplist
X_Mnumber = []
for x in Xlist:
    for x_num in i_Mnumber:
        if x == x_num[0]:
            X_Mnumber.append(x_num)
            break
X_Mnumber = sorted(X_Mnumber, key=lambda x:x[1],reverse=True)
Xs = [x[0]for x in X_Mnumber]
x_tmp = Xs[0]
x_tmp1 = x_tmp
for x in Xs[1:]:
    if motif_adj[x_tmp,x] >= 1 and x != x_tmp:
        x_tmp1 = x
        break
x_tmp_j_max = np.argmax(motif_adj[x_tmp,:])
print("x_tmp={},x_tmp_j_max={},x={}".format(x_tmp,x_tmp_j_max,x_tmp1))

print("\n\n")
Xlist = tmplist
Cilist_all = []
for x in Xlist:
    for x_num in C_all:
        if x == x_num[0]:
            Cilist_all.append(x_num)
            break
x_tmp_j_max = sorted(Cilist_all, key=lambda x:x[1],reverse=True)
Xs = [x[0]for x in Cilist_all]
x_tmp = Xs[0]
x_tmp1 = x_tmp
for x in Xs[1:]:
    if motif_adj[x_tmp,x] >= 1 and x != x_tmp:
        x_tmp1 = x
        break
x_tmp_j_max = np.argmax(motif_adj[x_tmp,:])
print("x_tmp={},x_tmp_j_max={},x={}".format(x_tmp,x_tmp_j_max,x_tmp1))



# weights = []
# for edge in edge_all:
#     weights.append(motif_adj[edge[0],edge[1]])

# best_x_Qw=ig.GraphBase.modularity(Gi,reallist,weights)
# print(best_x_Qw)
# # 求邻居节点
# x_tmp_js = np.nonzero(np.ravel(motif_adj[x_tmp,:]))
# x_tmp1_js = np.nonzero(np.ravel(motif_adj[x_tmp1,:]))

# =============================================================================
# ######## 计算网络度
# =============================================================================
# # 人工合成网络
# LFR_path = r"data/人工数据集/LFR_1000"
# lfr_no = 7
# lfr_network = LFR_path + r'/network'+str(lfr_no)+'.txt'

# 选择网络
# network = metabolic_network
# G1 = nx.read_edgelist(network,create_using=nx.Graph())
# G1 = G1.to_undirected()

# print(nx.info(G1))

'''
# =============================================================================
# ###### 网络文件转换
# =============================================================================
# 人工合成网络
LFR_path = r"H:/weiyawei/MFHCD_20230413_V/data/LFRnetwork/LFR_1000_5"
for i in range(9,10):
    lfr_no = i
    # lfr_network = LFR_path + r'/network'+str(lfr_no)+'.txt'
    # network = lfr_network
    for j in range(1):
        network_name = "network" + str(lfr_no) + str(j)
        
        data = []
        with open(LFR_path + "/real/" + network_name + '_groundtruth.txt', mode='r',encoding='UTF-8') as f:
              data = f.read().splitlines()
        
        newdata = []
        for line in data:
            newdata.append(line.split('\t')[1][:-1])
        
        with open(LFR_path + "/real/real/" + network_name + '_groundtruth.txt', mode='a+',encoding='UTF-8') as log_f:
            for d in newdata:
                    log_f.writelines(d+"\n")


# =============================================================================
# 统一网络文件格式 0 1
# =============================================================================
path = r'data/realNetwork/'
# path = r"data/LFRnetwork/LFR_1000_5/"
for netno in range(9,10):
    for netno1 in range(1):
        # network = path + 'network' + str(netno) + str(netno1) + '.txt'
        network = path + 'se_congress_bills.txt'
        datalist = []
        with open(network, mode='r',encoding='UTF-8') as f:
            for line in f.read().splitlines():
                new_line = ''
                line_datas = line.split(' ')
                for index, i in enumerate(line_datas):
                    if index>0:
                        new_line = new_line + ' ' + str(int(i)-1)
                    else:
                        new_line = new_line + str(int(i)-1)
                datalist.append(new_line)

        # new_network = path + 'network0-9/network' + str(netno) + str(netno1) + '.txt'
        new_network = path + 'realnet/se_congress_bills.txt'
        with open(new_network, mode='w',encoding='UTF-8') as log_f:
            for new_line in datalist:
                log_f.writelines(new_line + "\n")

# =============================================================================
# 读取/存储.mat文件
# =============================================================================
# import scipy.io as scio
# import numpy as np
# from tqdm import tqdm
# Data=scio.loadmat('data/经典数据集/dblp_adj.mat')
# python_mat = Data['A']
# n = python_mat.shape[0]
# edge_all = []
# for i in tqdm(range(n)):
#     for j in range(i,n):
#         if i != j and python_mat[i,j]>0:
#             edge_all.append((i,j))

# #将结果存储到文件
# save_network ='data/经典数据集/dblp_adj.txt'
# with open(save_network, mode='w',encoding='UTF-8') as net_f:
#     for edge in edge_all:
#         line = str(edge[0])+' '+ str(edge[1])
#         net_f.writelines(line + "\n")

# =============================================================================
# adj转txt
# =============================================================================
# import pandas as pd
# path = r'D:\weiyawei\workTask\experimentalRecord\HypergraphCD\HGCD\data\realNetwork\football.xlsx'
# df = pd.read_excel(path)
# colunms = list(df)
# #将结果存储到文件
# save_path = r'D:\weiyawei\workTask\experimentalRecord\HypergraphCD\HGCD\data\realNetwork\football.txt'
# with open(save_path, mode='w',encoding='UTF-8') as net_f:
#     for colnum in colunms:
#         ilist = df[colnum].tolist()
#         line=''
#         for i, v in enumerate(ilist):
#             if v==1:
#                 line = line + str(i) + ' '
#         line = line[:-1]
#         net_f.writelines(line + "\n")


# 社区标签转换 label-cno
network = r"D:\weiyawei\workTask\experimentalRecord\HypergraphCD\HGCD\data\realNetwork\real\email_Enron_ful.txt"
cnos_name = []
with open(network, mode='r',encoding='UTF-8') as f:
    for line in f.read().splitlines():
        cnos_name.append(line)

labels = [-1]*len(cnos_name)
for i, name in enumerate(cnos_name):
    for cno, cno_name in enumerate(list(set(cnos_name))):
        if name == cno_name:
            labels[i] = cno
            break
        











